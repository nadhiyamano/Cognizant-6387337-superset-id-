Hands on 4 - Theory: Difference between JPA, Hibernate, and Spring Data JPA

Java Persistence API (JPA)
- JSR 338 Specification for persisting, reading and managing data from Java objects
- It is only a specification, does not provide implementation
- Hibernate is one of the popular implementations of JPA

Hibernate
- Hibernate is an ORM (Object Relational Mapping) tool that implements the JPA specification
- Provides additional features beyond JPA like caching, lazy loading, etc.
- Requires boilerplate code for sessions and transactions

Spring Data JPA
- A part of the Spring ecosystem that provides an abstraction over JPA implementations like Hibernate
- Helps reduce boilerplate code by providing repository interfaces like JpaRepository
- Automatically handles sessions and transactions with Spring's @Transactional annotation

Code Comparison:

Hibernate:
Manual session and transaction management required:
    public Integer addEmployee(Employee employee) {
        Session session = factory.openSession();
        Transaction tx = null;
        Integer employeeID = null;

        try {
            tx = session.beginTransaction();
            employeeID = (Integer) session.save(employee);
            tx.commit();
        } catch (HibernateException e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }
        return employeeID;
    }

Spring Data JPA:
Simplified with Spring's repository support:
    @Autowired
    private EmployeeRepository employeeRepository;

    @Transactional
    public void addEmployee(Employee employee) {
        employeeRepository.save(employee);
    }

Summary:
| Feature              | Hibernate (Manual)           | Spring Data JPA                     |
|----------------------|-------------------------------|--------------------------------------|
| Session Management   | Manual                        | Automatic                            |
| Boilerplate Code     | More                          | Less                                 |
| Transaction Handling | Manual                        | @Transactional from Spring           |
| Ease of Use          | Medium                        | Easy                                 |